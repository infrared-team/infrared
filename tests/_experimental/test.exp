FILE:	tests/_experimental/test.js
TOKENS:
  String: use strict [90m(1:12)[39m
  Variable: Const [90m(3:1)[39m
  Identifier: Node [90m(3:7)[39m
  Operator: Assignment [90m(3:12)[39m
  Identifier: require [90m(3:14)[39m
  Expression (
      String: ../Nodes/multidirectional_tree_node.js [90m(3:61)[39m
  ) [90m(3:62)[39m
  Comment [90m(9:2)[39m
  Variable: Const [90m(10:1)[39m
  Identifier: KaryTree [90m(10:7)[39m
  Operator: Assignment [90m(10:16)[39m
  Function [90m(10:18)[39m
  Expression (
      Identifier: data [90m(10:27)[39m
  ) [90m(10:31)[39m
  Block {
      Expression (
          Identifier: data [90m(11:24)[39m
      ) [90m(11:28)[39m
      Identifier: Node [90m(11:19)[39m
      New [90m(11:15)[39m
      Operator: Assignment [90m(11:13)[39m
      Identifier: root [90m(11:8)[39m
      Operator: Dot [90m(11:7)[39m
      This [90m(11:3)[39m
  } [90m(12:1)[39m
  Comment [90m(18:2)[39m
  Identifier: KaryTree [90m(19:1)[39m
  Operator: Dot [90m(19:9)[39m
  Identifier: prototype [90m(19:10)[39m
  Operator: Dot [90m(19:19)[39m
  Identifier: isLeaf [90m(19:20)[39m
  Operator: Assignment [90m(19:27)[39m
  Function [90m(19:29)[39m
  Expression (
      Identifier: node [90m(19:38)[39m
  ) [90m(19:42)[39m
  Block {
      Expression (
          Number [90m(23:36)[39m
          Operator: StrictEqual [90m(23:32)[39m
          Identifier: length [90m(23:25)[39m
          Operator: Dot [90m(23:24)[39m
          Identifier: children [90m(23:16)[39m
          Operator: Dot [90m(23:15)[39m
          Identifier: node [90m(23:11)[39m
      ) [90m(23:37)[39m
      Return [90m(23:3)[39m
      Block {
          Expression (
              String: Attempting to check the leaves of undefined node in KaryTree.isLeaf [90m(21:93)[39m
          ) [90m(21:94)[39m
          Identifier: TypeError [90m(21:15)[39m
          New [90m(21:11)[39m
          Throw [90m(21:5)[39m
      } [90m(22:3)[39m
      Expression (
          Null [90m(20:46)[39m
          Operator: StrictEqual [90m(20:42)[39m
          Identifier: node [90m(20:37)[39m
          Operator: LogicalOr [90m(20:34)[39m
          String: undefined [90m(20:32)[39m
          Operator: StrictEqual [90m(20:18)[39m
          Identifier: node [90m(20:13)[39m
          Typeof [90m(20:6)[39m
      ) [90m(20:50)[39m
      If [90m(20:3)[39m
  } [90m(24:1)[39m
  Comment [90m(30:2)[39m
  Identifier: KaryTree [90m(31:1)[39m
  Operator: Dot [90m(31:9)[39m
  Identifier: prototype [90m(31:10)[39m
  Operator: Dot [90m(31:19)[39m
  Identifier: emptySubtree [90m(31:20)[39m
  Operator: Assignment [90m(31:33)[39m
  Function [90m(31:35)[39m
  Expression (
      Identifier: node [90m(31:44)[39m
  ) [90m(31:48)[39m
  Block {
      Null [90m(39:10)[39m
      Operator: Assignment [90m(39:8)[39m
      Identifier: node [90m(39:3)[39m
      Expression (
          Expression (
              This [90m(38:10)[39m
          ) [90m(38:14)[39m
          Identifier: bind [90m(38:5)[39m
          Operator: Dot [90m(38:4)[39m
          Block {
              Null [90m(37:13)[39m
              Operator: Assignment [90m(37:11)[39m
              Identifier: child [90m(37:5)[39m
              Expression (
                  Identifier: child [90m(36:23)[39m
              ) [90m(36:28)[39m
              Identifier: emptySubtree [90m(36:10)[39m
              Operator: Dot [90m(36:9)[39m
              This [90m(36:5)[39m
          } [90m(38:3)[39m
          Expression (
              Identifier: child [90m(35:30)[39m
          ) [90m(35:35)[39m
          Function [90m(35:21)[39m
      ) [90m(38:15)[39m
      Identifier: map [90m(35:17)[39m
      Operator: Dot [90m(35:16)[39m
      Identifier: children [90m(35:8)[39m
      Operator: Dot [90m(35:7)[39m
      Identifier: node [90m(35:3)[39m
      Block {
          Return [90m(33:5)[39m
      } [90m(34:3)[39m
      Expression (
          Null [90m(32:15)[39m
          Operator: StrictEqual [90m(32:11)[39m
          Identifier: node [90m(32:6)[39m
      ) [90m(32:19)[39m
      If [90m(32:3)[39m
  } [90m(40:1)[39m
